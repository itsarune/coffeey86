# Pipelined with stalling: CC=4292 RI=1543
# Pipelined with stalling: CC=3933 RI=1275

# change log
# 1: moved constants to its own registers instead of re-initing r11 all the time
main:
	irmovq	$size, %rsi
	irmovq	$stack, %rsp
	irmovq	$data, %rdi
	mrmovq	0(%rsi), %rsi
	call	smooth
	halt

smooth:
        pushq %rbx
        pushq %rbp
        pushq %r12
        pushq %r13
        pushq %r14
        irmovq  $1, %rax        # rax holds i
	    irmovq	$1, %r11
        irmovq  $8, %rbp
        irmovq  $4, %r10
test:
        rrmovq  %rsi, %rdx      # compute i < n - 1
	subq	%r11, %rdx
	subq	%rax, %rdx
	jle	done

#---------------------AVG-----------------------------

    # %r12 used for array[i-1] calculations
    # %r13 used for array[i] calculations
    # %r14 used for array[i+1] calculations
    
    rrmovq  %rax, %r12       # array[i - 1] into %rbx
    rrmovq  %rax, %r13       # array[i] into %rcx
    rrmovq	%rax, %r14       # array[i + 1] into %rdx
    
	subq	%r11, %r12
	addq    %r11, %r14
	
	mulq	%rbp, %r12
	mulq	%rbp, %r13
	mulq	%rbp, %r14
	
	addq	%rdi, %r12
	addq	%rdi, %r13
	addq	%rdi, %r14
	
	mrmovq	0(%r12), %rbx
	mrmovq	0(%r13), %rcx
	mrmovq	0(%r14), %rdx
	
	#rrmovq  %rax, %r8       # array[i - 1] into %rbx
	#subq	%r11, %r12
	#mulq	%rbp, %r8
	#addq	%rdi, %r8
	#mrmovq	0(%r8), %rbx

    # rrmovq  %rax, %r8       # array[i] into %rcx
	#mulq	%rbp, %r8
	#addq	%rdi, %r8
	#mrmovq	0(%r8), %rcx

	#rrmovq	%rax, %r8       # array[i + 1] into %rdx
    #addq    %r11, %r8
	#mulq	%rbp, %r8
	#addq	%rdi, %r8
	#mrmovq	0(%r8), %rdx

# r8 not used by avg at this point
        rrmovq  %rbx, %r8      # compute %rbx + 2 * %rcx + %rdx in %rax
	irmovq	$2, %r9
	mulq	%r9, %rcx
	addq	%rcx, %r8
	addq	%rdx, %r8

	divq	%r10, %r8

#----------------------------------------------------

	rrmovq	%rax, %r9       # array[i] = avg(...)
	mulq	%rbp, %r9
	addq	%rdi, %r9
        rmmovq  %r8, 0(%r9)

        addq    %r11, %rax      # increment i
	jmp	test
done:
    popq  %r14
    popq %r13
    popq %r12
    popq %rbp
    popq %rbx
	ret


# Array with 32 elements
.pos	0x2000
size:
.quad	32
data:
.quad	11
.quad	12
.quad	10
.quad	5
.quad	1
.quad	8
.quad	15
.quad	0
.quad	1
.quad	8
.quad	13
.quad	5
.quad	6
.quad	5
.quad	9
.quad	12
.quad	4
.quad	15
.quad	5
.quad	14
.quad	15
.quad	2
.quad	7
.quad	16
.quad	13
.quad	8
.quad	15
.quad	1
.quad	14
.quad	11
.quad	0
.quad	8

.pos 0x5000
stack:
