main:
	irmovq	$size, %rsi
	irmovq	$stack, %rsp
	irmovq	$data, %rdi
	mrmovq	0(%rsi), %rsi
	call	smooth
	halt

smooth:
        # STALL CITY
        pushq %rbx
        irmovq  $1, %rax        # rax holds i
        pushq %rbp
        irmovq	$1, %r11
        pushq %r12
        irmovq  $8, %rbp
        subq    %r11, %rsi
        pushq %r13
        irmovq  $4, %r10
        subq    %r11, %rsi
        pushq %r14
        
	    # AVG setup for i-1 and i
	    rrmovq  %rax, %r12       # array[i - 1] into %rbx
	    rrmovq  %rax, %r13       # array[i] into %rcx
	    rrmovq  %rax, %r14       # array[i+1]
	    
	    subq	%r11, %r12
	    addq    %r11, %r14
	    
	    mulq	%rbp, %r13
	    mulq	%rbp, %r12
	    mulq    %rbp, %r14

	    addq	%rdi, %r13
        addq	%rdi, %r12
        addq    %rdi, %r14

        # %r12 used for array[i-1] calculations, rbx
        # %r13 used for array[i] calculations, rcx
        # %r14 used for array[i+1] calculations, r8
        mrmovq	0(%r13), %rcx
        mrmovq	0(%r12), %rbx
        
        irmovq	$2, %r9         # for A
        
        andq    %rsi, %rsi
        jle done

test:

    # B loop conditional is done at both ends
    mulq	%r9, %rcx        #A
    
    mrmovq	0(%r14), %r8

    addq    %rbx, %rcx       #A
    
	addq    %r8, %rcx        #A
	
	addq    %rbp, %r14      # array[i+1] for next
	divq	%r10, %rcx      # C

    rmmovq  %rcx, 0(%r13)
    addq    %rbp, %r13

    subq	%r11, %rsi      # B 

    #AVG setup for next tick
    rrmovq %rcx, %rbx
    rrmovq %r8, %rcx
    
	jg test
	
done:
    popq  %r14
    popq %r13
    popq %r12
    popq %rbp
    popq %rbx
	ret


# Array with 32 elements
.pos	0x2000
size:
.quad	32
data:
.quad	11
.quad	12
.quad	10
.quad	5
.quad	1
.quad	8
.quad	15
.quad	0
.quad	1
.quad	8
.quad	13
.quad	5
.quad	6
.quad	5
.quad	9
.quad	12
.quad	4
.quad	15
.quad	5
.quad	14
.quad	15
.quad	2
.quad	7
.quad	16
.quad	13
.quad	8
.quad	15
.quad	1
.quad	14
.quad	11
.quad	0
.quad	8

.pos 0x5000
stack:
